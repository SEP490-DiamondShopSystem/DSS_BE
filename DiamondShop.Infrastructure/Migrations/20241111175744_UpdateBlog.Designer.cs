// <auto-generated />
using System;
using DiamondShop.Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiamondShop.Infrastructure.Migrations
{
    [DbContext(typeof(DiamondShopDbContext))]
    [Migration("20241111175744_UpdateBlog")]
    partial class UpdateBlog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.Property<string>("AccountsId")
                        .HasColumnType("text");

                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountAccountRole");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPoint")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id", "AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Blogs.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EngravedFont")
                        .HasColumnType("text");

                    b.Property<string>("EngravedText")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<string>("JewelryModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("SideDiamondId")
                        .HasColumnType("text");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("JewelryModelId");

                    b.HasIndex("MetalId");

                    b.HasIndex("SideDiamondId");

                    b.HasIndex("SizeId");

                    b.ToTable("CustomizeRequest");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.DiamondRequest", b =>
                {
                    b.Property<string>("DiamondRequestId")
                        .HasColumnType("text");

                    b.Property<string>("CustomizeRequestId")
                        .HasColumnType("text");

                    b.Property<float?>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float?>("CaratTo")
                        .HasColumnType("real");

                    b.Property<int?>("Clarity")
                        .HasColumnType("integer");

                    b.Property<int?>("Color")
                        .HasColumnType("integer");

                    b.Property<int?>("Culet")
                        .HasColumnType("integer");

                    b.Property<int?>("Cut")
                        .HasColumnType("integer");

                    b.Property<string>("DiamondId")
                        .HasColumnType("text");

                    b.Property<string>("DiamondShapeId")
                        .HasColumnType("text");

                    b.Property<int?>("Girdle")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsLabGrown")
                        .HasColumnType("boolean");

                    b.Property<int?>("Polish")
                        .HasColumnType("integer");

                    b.Property<int?>("Symmetry")
                        .HasColumnType("integer");

                    b.HasKey("DiamondRequestId", "CustomizeRequestId");

                    b.HasIndex("CustomizeRequestId");

                    b.HasIndex("DiamondId");

                    b.HasIndex("DiamondShapeId");

                    b.ToTable("DiamondRequest");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DeliveryFees.DeliveryFee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ToLocation")
                        .HasColumnType("text");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ToLocationId");

                    b.ToTable("DeliveryFee");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.DiamondPrice", b =>
                {
                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaId")
                        .HasColumnType("text");

                    b.Property<bool>("IsLabDiamond")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSideDiamond")
                        .HasColumnType("boolean");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("ShapeId", "CriteriaId", "IsLabDiamond", "IsSideDiamond");

                    b.HasIndex("CriteriaId", "IsLabDiamond", "IsSideDiamond");

                    b.HasIndex("ShapeId", "IsLabDiamond", "IsSideDiamond");

                    b.HasIndex("CriteriaId", "ShapeId", "IsLabDiamond", "IsSideDiamond");

                    b.ToTable("DiamondPrice", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.Entities.DiamondCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float>("CaratTo")
                        .HasColumnType("real");

                    b.Property<int?>("Clarity")
                        .HasColumnType("integer");

                    b.Property<int?>("Color")
                        .HasColumnType("integer");

                    b.Property<int?>("Cut")
                        .HasColumnType("integer");

                    b.Property<bool?>("IsLabGrown")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSideDiamond")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CaratFrom", "CaratTo", "IsSideDiamond", "IsLabGrown");

                    b.ToTable("DiamondCriteria", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Diamond_Shape", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Shape = "Round"
                        },
                        new
                        {
                            Id = "2",
                            Shape = "Princess"
                        },
                        new
                        {
                            Id = "3",
                            Shape = "Cushion"
                        },
                        new
                        {
                            Id = "4",
                            Shape = "Emerald"
                        },
                        new
                        {
                            Id = "5",
                            Shape = "Oval"
                        },
                        new
                        {
                            Id = "6",
                            Shape = "Radiant"
                        },
                        new
                        {
                            Id = "7",
                            Shape = "Asscher"
                        },
                        new
                        {
                            Id = "8",
                            Shape = "Marquise"
                        },
                        new
                        {
                            Id = "9",
                            Shape = "Heart"
                        },
                        new
                        {
                            Id = "10",
                            Shape = "Pear"
                        },
                        new
                        {
                            Id = "99",
                            Shape = "Any"
                        },
                        new
                        {
                            Id = "98",
                            Shape = "Fancy_Shape"
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Diamonds.Diamond", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("Carat")
                        .HasColumnType("real");

                    b.Property<int>("Certificate")
                        .HasColumnType("integer");

                    b.Property<int>("Clarity")
                        .HasColumnType("integer");

                    b.Property<int>("Color")
                        .HasColumnType("integer");

                    b.Property<int>("Culet")
                        .HasColumnType("integer");

                    b.Property<int?>("Cut")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DefaultPrice")
                        .HasColumnType("numeric");

                    b.Property<float>("Depth")
                        .HasColumnType("real");

                    b.Property<string>("DiamondShapeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Fluorescence")
                        .HasColumnType("integer");

                    b.Property<int>("Girdle")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLabDiamond")
                        .HasColumnType("boolean");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Polish")
                        .HasColumnType("integer");

                    b.Property<decimal>("PriceOffset")
                        .HasColumnType("numeric");

                    b.Property<string>("SerialCode")
                        .HasColumnType("text");

                    b.Property<decimal?>("SoldPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Symmetry")
                        .HasColumnType("integer");

                    b.Property<float>("Table")
                        .HasColumnType("real");

                    b.Property<float>("WidthLengthRatio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DiamondShapeId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("Carat", "Color", "Clarity", "Cut", "IsLabDiamond", "JewelryId");

                    b.ToTable("Diamond", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("JewelryReview", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("D_Price")
                        .HasColumnType("numeric");

                    b.Property<string>("EngravedFont")
                        .HasColumnType("text");

                    b.Property<string>("EngravedText")
                        .HasColumnType("text");

                    b.Property<string>("MetalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("ND_Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("SD_Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SerialCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("SoldPrice")
                        .HasColumnType("numeric");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("MetalId");

                    b.HasIndex("ModelId");

                    b.HasIndex("SizeId");

                    b.ToTable("Jewelry", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId")
                        .IsUnique();

                    b.ToTable("JewelryModelCategory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Description = "A normal ring",
                            IsGeneral = true,
                            Name = "Ring",
                            ThumbnailPath = ""
                        },
                        new
                        {
                            Id = "2",
                            Description = "A normal necklace",
                            IsGeneral = true,
                            Name = "Necklace",
                            ThumbnailPath = ""
                        },
                        new
                        {
                            Id = "3",
                            Description = "A normal bracelace",
                            IsGeneral = true,
                            Name = "Bracelace",
                            ThumbnailPath = ""
                        },
                        new
                        {
                            Id = "4",
                            Description = "A normal earring",
                            IsGeneral = true,
                            Name = "Earring",
                            ThumbnailPath = ""
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("MainDiamondReq", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", b =>
                {
                    b.Property<string>("MainDiamondReqId")
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.Property<float>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float>("CaratTo")
                        .HasColumnType("real");

                    b.HasKey("MainDiamondReqId", "ShapeId");

                    b.HasIndex("ShapeId");

                    b.ToTable("MainDiamondShape", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Metal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Platinum",
                            Price = 778370m
                        },
                        new
                        {
                            Id = "2",
                            Name = "14K Yellow Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "3",
                            Name = "14K White Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "4",
                            Name = "14K Pink Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "5",
                            Name = "16K Yellow Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "6",
                            Name = "16K White Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "7",
                            Name = "16K Pink Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "8",
                            Name = "18K Yellow Gold",
                            Price = 1565233m
                        },
                        new
                        {
                            Id = "9",
                            Name = "18K White Gold",
                            Price = 1565233m
                        },
                        new
                        {
                            Id = "10",
                            Name = "18K Pink Gold",
                            Price = 1565233m
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondOpt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("CaratWeight")
                        .HasColumnType("real");

                    b.Property<int>("ClarityMax")
                        .HasColumnType("integer");

                    b.Property<int>("ClarityMin")
                        .HasColumnType("integer");

                    b.Property<int>("ColorMax")
                        .HasColumnType("integer");

                    b.Property<int>("ColorMin")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLabGrown")
                        .HasColumnType("boolean");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ShapeId");

                    b.ToTable("SideDiamondOpt", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Size", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3",
                            Unit = "milimeter",
                            Value = 3f
                        },
                        new
                        {
                            Id = "4",
                            Unit = "milimeter",
                            Value = 4f
                        },
                        new
                        {
                            Id = "5",
                            Unit = "milimeter",
                            Value = 5f
                        },
                        new
                        {
                            Id = "6",
                            Unit = "milimeter",
                            Value = 6f
                        },
                        new
                        {
                            Id = "7",
                            Unit = "milimeter",
                            Value = 7f
                        },
                        new
                        {
                            Id = "8",
                            Unit = "milimeter",
                            Value = 8f
                        },
                        new
                        {
                            Id = "9",
                            Unit = "milimeter",
                            Value = 9f
                        },
                        new
                        {
                            Id = "10",
                            Unit = "milimeter",
                            Value = 10f
                        },
                        new
                        {
                            Id = "11",
                            Unit = "milimeter",
                            Value = 11f
                        },
                        new
                        {
                            Id = "12",
                            Unit = "milimeter",
                            Value = 12f
                        },
                        new
                        {
                            Id = "13",
                            Unit = "milimeter",
                            Value = 13f
                        },
                        new
                        {
                            Id = "14",
                            Unit = "milimeter",
                            Value = 14f
                        },
                        new
                        {
                            Id = "15",
                            Unit = "milimeter",
                            Value = 15f
                        },
                        new
                        {
                            Id = "16",
                            Unit = "milimeter",
                            Value = 16f
                        },
                        new
                        {
                            Id = "17",
                            Unit = "milimeter",
                            Value = 17f
                        },
                        new
                        {
                            Id = "18",
                            Unit = "milimeter",
                            Value = 18f
                        },
                        new
                        {
                            Id = "19",
                            Unit = "milimeter",
                            Value = 19f
                        },
                        new
                        {
                            Id = "20",
                            Unit = "milimeter",
                            Value = 20f
                        },
                        new
                        {
                            Id = "21",
                            Unit = "milimeter",
                            Value = 21f
                        },
                        new
                        {
                            Id = "22",
                            Unit = "milimeter",
                            Value = 22f
                        },
                        new
                        {
                            Id = "23",
                            Unit = "milimeter",
                            Value = 23f
                        },
                        new
                        {
                            Id = "24",
                            Unit = "milimeter",
                            Value = 24f
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SizeMetal", b =>
                {
                    b.Property<string>("SizeId")
                        .HasColumnType("text");

                    b.Property<string>("MetalId")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("SizeId", "MetalId", "ModelId");

                    b.HasIndex("MetalId");

                    b.HasIndex("ModelId");

                    b.ToTable("SizeMetal", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackType")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChainType")
                        .HasColumnType("text");

                    b.Property<string>("ClaspType")
                        .HasColumnType("text");

                    b.Property<decimal>("CraftmanFee")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsEngravable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRhodiumFinish")
                        .HasColumnType("boolean");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<string>("ModelCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("JewelryModel", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Locations.AppCities", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("Slug");

                    b.ToTable("AppCities");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Locations.AppProvince", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ApiId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AppProvince");

                    b.HasData(
                        new
                        {
                            Id = "89",
                            ApiId = "89",
                            IsActive = true,
                            Name = "An Giang"
                        },
                        new
                        {
                            Id = "77",
                            ApiId = "77",
                            IsActive = true,
                            Name = "Bà Rịa - Vũng Tàu"
                        },
                        new
                        {
                            Id = "24",
                            ApiId = "24",
                            IsActive = true,
                            Name = "Bắc Giang"
                        },
                        new
                        {
                            Id = "6",
                            ApiId = "6",
                            IsActive = true,
                            Name = "Bắc Kạn"
                        },
                        new
                        {
                            Id = "95",
                            ApiId = "95",
                            IsActive = true,
                            Name = "Bạc Liêu"
                        },
                        new
                        {
                            Id = "27",
                            ApiId = "27",
                            IsActive = true,
                            Name = "Bắc Ninh"
                        },
                        new
                        {
                            Id = "83",
                            ApiId = "83",
                            IsActive = true,
                            Name = "Bến Tre"
                        },
                        new
                        {
                            Id = "52",
                            ApiId = "52",
                            IsActive = true,
                            Name = "Bình Định"
                        },
                        new
                        {
                            Id = "74",
                            ApiId = "74",
                            IsActive = true,
                            Name = "Bình Dương"
                        },
                        new
                        {
                            Id = "70",
                            ApiId = "70",
                            IsActive = true,
                            Name = "Bình Phước"
                        },
                        new
                        {
                            Id = "60",
                            ApiId = "60",
                            IsActive = true,
                            Name = "Bình Thuận"
                        },
                        new
                        {
                            Id = "96",
                            ApiId = "96",
                            IsActive = true,
                            Name = "Cà Mau"
                        },
                        new
                        {
                            Id = "92",
                            ApiId = "92",
                            IsActive = true,
                            Name = "Cần Thơ"
                        },
                        new
                        {
                            Id = "4",
                            ApiId = "4",
                            IsActive = true,
                            Name = "Cao Bằng"
                        },
                        new
                        {
                            Id = "48",
                            ApiId = "48",
                            IsActive = true,
                            Name = "Đà Nẵng"
                        },
                        new
                        {
                            Id = "66",
                            ApiId = "66",
                            IsActive = true,
                            Name = "Đắk Lắk"
                        },
                        new
                        {
                            Id = "67",
                            ApiId = "67",
                            IsActive = true,
                            Name = "Đắk Nông"
                        },
                        new
                        {
                            Id = "11",
                            ApiId = "11",
                            IsActive = true,
                            Name = "Điện Biên"
                        },
                        new
                        {
                            Id = "75",
                            ApiId = "75",
                            IsActive = true,
                            Name = "Đồng Nai"
                        },
                        new
                        {
                            Id = "87",
                            ApiId = "87",
                            IsActive = true,
                            Name = "Đồng Tháp"
                        },
                        new
                        {
                            Id = "64",
                            ApiId = "64",
                            IsActive = true,
                            Name = "Gia Lai"
                        },
                        new
                        {
                            Id = "2",
                            ApiId = "2",
                            IsActive = true,
                            Name = "Hà Giang"
                        },
                        new
                        {
                            Id = "35",
                            ApiId = "35",
                            IsActive = true,
                            Name = "Hà Nam"
                        },
                        new
                        {
                            Id = "1",
                            ApiId = "1",
                            IsActive = true,
                            Name = "Hà Nội"
                        },
                        new
                        {
                            Id = "42",
                            ApiId = "42",
                            IsActive = true,
                            Name = "Hà Tĩnh"
                        },
                        new
                        {
                            Id = "30",
                            ApiId = "30",
                            IsActive = true,
                            Name = "Hải Dương"
                        },
                        new
                        {
                            Id = "31",
                            ApiId = "31",
                            IsActive = true,
                            Name = "Hải Phòng"
                        },
                        new
                        {
                            Id = "93",
                            ApiId = "93",
                            IsActive = true,
                            Name = "Hậu Giang"
                        },
                        new
                        {
                            Id = "79",
                            ApiId = "79",
                            IsActive = true,
                            Name = "Hồ Chí Minh"
                        },
                        new
                        {
                            Id = "17",
                            ApiId = "17",
                            IsActive = true,
                            Name = "Hoà Bình"
                        },
                        new
                        {
                            Id = "33",
                            ApiId = "33",
                            IsActive = true,
                            Name = "Hưng Yên"
                        },
                        new
                        {
                            Id = "56",
                            ApiId = "56",
                            IsActive = true,
                            Name = "Khánh Hòa"
                        },
                        new
                        {
                            Id = "91",
                            ApiId = "91",
                            IsActive = true,
                            Name = "Kiên Giang"
                        },
                        new
                        {
                            Id = "62",
                            ApiId = "62",
                            IsActive = true,
                            Name = "Kon Tum"
                        },
                        new
                        {
                            Id = "12",
                            ApiId = "12",
                            IsActive = true,
                            Name = "Lai Châu"
                        },
                        new
                        {
                            Id = "68",
                            ApiId = "68",
                            IsActive = true,
                            Name = "Lâm Đồng"
                        },
                        new
                        {
                            Id = "20",
                            ApiId = "20",
                            IsActive = true,
                            Name = "Lạng Sơn"
                        },
                        new
                        {
                            Id = "10",
                            ApiId = "10",
                            IsActive = true,
                            Name = "Lào Cai"
                        },
                        new
                        {
                            Id = "80",
                            ApiId = "80",
                            IsActive = true,
                            Name = "Long An"
                        },
                        new
                        {
                            Id = "36",
                            ApiId = "36",
                            IsActive = true,
                            Name = "Nam Định"
                        },
                        new
                        {
                            Id = "40",
                            ApiId = "40",
                            IsActive = true,
                            Name = "Nghệ An"
                        },
                        new
                        {
                            Id = "37",
                            ApiId = "37",
                            IsActive = true,
                            Name = "Ninh Bình"
                        },
                        new
                        {
                            Id = "58",
                            ApiId = "58",
                            IsActive = true,
                            Name = "Ninh Thuận"
                        },
                        new
                        {
                            Id = "25",
                            ApiId = "25",
                            IsActive = true,
                            Name = "Phú Thọ"
                        },
                        new
                        {
                            Id = "54",
                            ApiId = "54",
                            IsActive = true,
                            Name = "Phú Yên"
                        },
                        new
                        {
                            Id = "44",
                            ApiId = "44",
                            IsActive = true,
                            Name = "Quảng Bình"
                        },
                        new
                        {
                            Id = "49",
                            ApiId = "49",
                            IsActive = true,
                            Name = "Quảng Nam"
                        },
                        new
                        {
                            Id = "51",
                            ApiId = "51",
                            IsActive = true,
                            Name = "Quảng Ngãi"
                        },
                        new
                        {
                            Id = "22",
                            ApiId = "22",
                            IsActive = true,
                            Name = "Quảng Ninh"
                        },
                        new
                        {
                            Id = "45",
                            ApiId = "45",
                            IsActive = true,
                            Name = "Quảng Trị"
                        },
                        new
                        {
                            Id = "94",
                            ApiId = "94",
                            IsActive = true,
                            Name = "Sóc Trăng"
                        },
                        new
                        {
                            Id = "14",
                            ApiId = "14",
                            IsActive = true,
                            Name = "Sơn La"
                        },
                        new
                        {
                            Id = "72",
                            ApiId = "72",
                            IsActive = true,
                            Name = "Tây Ninh"
                        },
                        new
                        {
                            Id = "34",
                            ApiId = "34",
                            IsActive = true,
                            Name = "Thái Bình"
                        },
                        new
                        {
                            Id = "19",
                            ApiId = "19",
                            IsActive = true,
                            Name = "Thái Nguyên"
                        },
                        new
                        {
                            Id = "38",
                            ApiId = "38",
                            IsActive = true,
                            Name = "Thanh Hóa"
                        },
                        new
                        {
                            Id = "46",
                            ApiId = "46",
                            IsActive = true,
                            Name = "Thừa Thiên Huế"
                        },
                        new
                        {
                            Id = "82",
                            ApiId = "82",
                            IsActive = true,
                            Name = "Tiền Giang"
                        },
                        new
                        {
                            Id = "84",
                            ApiId = "84",
                            IsActive = true,
                            Name = "Trà Vinh"
                        },
                        new
                        {
                            Id = "8",
                            ApiId = "8",
                            IsActive = true,
                            Name = "Tuyên Quang"
                        },
                        new
                        {
                            Id = "86",
                            ApiId = "86",
                            IsActive = true,
                            Name = "Vĩnh Long"
                        },
                        new
                        {
                            Id = "26",
                            ApiId = "26",
                            IsActive = true,
                            Name = "Vĩnh Phúc"
                        },
                        new
                        {
                            Id = "15",
                            ApiId = "15",
                            IsActive = true,
                            Name = "Yên Bái"
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.News.News", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiamondId")
                        .HasColumnType("text");

                    b.Property<string>("DiscountId")
                        .HasColumnType("text");

                    b.Property<int?>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PromoType")
                        .HasColumnType("integer");

                    b.Property<decimal?>("PromoValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyId")
                        .HasColumnType("text");

                    b.Property<decimal>("WarrantyPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("DiamondId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("JewelryId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItemWarranty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("OrderItemWarranty");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousLogId")
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PreviousLogId")
                        .IsUnique();

                    b.ToTable("OrderLog", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CancelledReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomizeRequestId")
                        .HasColumnType("text");

                    b.Property<string>("DelivererId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("OrderSavedAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("ParentOrderId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethodId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionId")
                        .HasColumnType("text");

                    b.Property<int>("ShipFailedCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShipFailedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalFine")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRefund")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomizeRequestId")
                        .IsUnique();

                    b.HasIndex("DelivererId");

                    b.HasIndex("ParentOrderId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("PromotionId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Gift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<float?>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float?>("CaratTo")
                        .HasColumnType("real");

                    b.Property<int?>("ClarityFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("ClarityTo")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorTo")
                        .HasColumnType("integer");

                    b.Property<int?>("CutFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("CutTo")
                        .HasColumnType("integer");

                    b.Property<int?>("DiamondOrigin")
                        .HasColumnType("integer");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionId")
                        .HasColumnType("text");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Gift", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<float?>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float?>("CaratTo")
                        .HasColumnType("real");

                    b.Property<int?>("ClarityFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("ClarityTo")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorTo")
                        .HasColumnType("integer");

                    b.Property<int?>("CutFrom")
                        .HasColumnType("integer");

                    b.Property<int?>("CutTo")
                        .HasColumnType("integer");

                    b.Property<int?>("DiamondOrigin")
                        .HasColumnType("integer");

                    b.Property<string>("DiscountId")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionId")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromoReq", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReqShape", b =>
                {
                    b.Property<string>("PromoReqId")
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.HasKey("PromoReqId", "ShapeId");

                    b.HasIndex("ShapeId");

                    b.ToTable("PromoReqShape", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsExcludeQualifierProduct")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RedemptionMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.RoleAggregate.AccountRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Account_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            RoleDescription = "customer",
                            RoleName = "customer",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "4",
                            RoleDescription = "customer_gold",
                            RoleName = "customer_gold",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "3",
                            RoleDescription = "customer_silver",
                            RoleName = "customer_silver",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "2",
                            RoleDescription = "customer_bronze",
                            RoleName = "customer_bronze",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "11",
                            RoleDescription = "staff",
                            RoleName = "staff",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "22",
                            RoleDescription = "manager",
                            RoleName = "manager",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "33",
                            RoleDescription = "admin",
                            RoleName = "admin",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "44",
                            RoleDescription = "deliverer",
                            RoleName = "deliverer",
                            RoleType = 1
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MethodThumbnailPath")
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            MethodName = "BANK_TRANSFER",
                            Status = true
                        },
                        new
                        {
                            Id = "2",
                            MethodName = "ZALOPAY",
                            Status = true
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppTransactionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsManual")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PayMethodId")
                        .HasColumnType("text");

                    b.Property<string>("PaygateTransactionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefundedTransacId")
                        .HasColumnType("text");

                    b.Property<string>("TimeStampe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PayMethodId");

                    b.HasIndex("RefundedTransacId")
                        .IsUnique();

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Warranties.Warranty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MonthDuration")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Warranty");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Code = "THREE_MONTHS",
                            CreateDate = new DateTime(2024, 11, 11, 17, 57, 42, 412, DateTimeKind.Utc).AddTicks(35),
                            MonthDuration = 3,
                            Name = "Default_Jewelry_Warranty",
                            Price = 0m,
                            Type = "Jewelry"
                        },
                        new
                        {
                            Id = "2",
                            Code = "THREE_MONTHS",
                            CreateDate = new DateTime(2024, 11, 11, 17, 57, 42, 412, DateTimeKind.Utc).AddTicks(299),
                            MonthDuration = 3,
                            Name = "Default_Diamond_Warranty",
                            Price = 0m,
                            Type = "Diamond"
                        },
                        new
                        {
                            Id = "3",
                            Code = "ONE_YEAR",
                            CreateDate = new DateTime(2024, 11, 11, 17, 57, 42, 412, DateTimeKind.Utc).AddTicks(304),
                            MonthDuration = 12,
                            Name = "One_Year_Jewelry_Warranty",
                            Price = 150000m,
                            Type = "Jewelry"
                        },
                        new
                        {
                            Id = "4",
                            Code = "ONE_YEAR",
                            CreateDate = new DateTime(2024, 11, 11, 17, 57, 42, 412, DateTimeKind.Utc).AddTicks(306),
                            MonthDuration = 12,
                            Name = "One_Year_Diamond_Warranty",
                            Price = 120000m,
                            Type = "Diamond"
                        });
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Databases.ApplicationSettings", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Outbox.OutboxMessages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("ProcessTime")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("outbox_message", (string)null);
                });

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.RoleAggregate.AccountRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.AccountAggregate.Account", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("AccountId");

                            b1.ToTable("Account");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Entities.Address", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Blogs.Blog", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("BlogId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blog");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", "Jewelry")
                        .WithMany()
                        .HasForeignKey("JewelryId");

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "JewelryModel")
                        .WithMany()
                        .HasForeignKey("JewelryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", "Metal")
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondOpt", "SideDiamond")
                        .WithMany()
                        .HasForeignKey("SideDiamondId");

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Jewelry");

                    b.Navigation("JewelryModel");

                    b.Navigation("Metal");

                    b.Navigation("SideDiamond");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.DiamondRequest", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", null)
                        .WithMany("DiamondRequests")
                        .HasForeignKey("CustomizeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Diamonds.Diamond", "Diamond")
                        .WithMany()
                        .HasForeignKey("DiamondId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "DiamondShape")
                        .WithMany()
                        .HasForeignKey("DiamondShapeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Diamond");

                    b.Navigation("DiamondShape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DeliveryFees.DeliveryFee", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Locations.AppCities", null)
                        .WithMany()
                        .HasForeignKey("ToLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.DiamondPrice", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.DiamondPrices.Entities.DiamondCriteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Diamonds.Diamond", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "DiamondShape")
                        .WithMany()
                        .HasForeignKey("DiamondShapeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", null)
                        .WithMany("Diamonds")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("DiamondShop.Domain.Common.Products.ProductLock", "ProductLock", b1 =>
                        {
                            b1.Property<string>("DiamondId")
                                .HasColumnType("text");

                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("LockEndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("DiamondId");

                            b1.ToTable("Diamond");

                            b1.WithOwner()
                                .HasForeignKey("DiamondId");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("DiamondId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DiamondId");

                            b1.ToTable("Diamond");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("DiamondId");
                        });

                    b.Navigation("DiamondShape");

                    b.Navigation("ProductLock");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", "Jewelry")
                        .WithOne("Review")
                        .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", "Id");

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "Medias", b1 =>
                        {
                            b1.Property<string>("JewelryReviewId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryReviewId", "Id");

                            b1.ToTable("JewelryReview");

                            b1.ToJson("Medias");

                            b1.WithOwner()
                                .HasForeignKey("JewelryReviewId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Jewelry");

                    b.Navigation("Medias");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", "Metal")
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Models.Jewelries.Entities.JewelrySideDiamond", "SideDiamond", b1 =>
                        {
                            b1.Property<string>("JewelryId")
                                .HasColumnType("text");

                            b1.Property<float>("Carat")
                                .HasColumnType("real")
                                .HasColumnName("Carat");

                            b1.Property<string>("ClarityMax")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClarityMax");

                            b1.Property<string>("ClarityMin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ClarityMin");

                            b1.Property<string>("ColorMax")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ColorMax");

                            b1.Property<string>("ColorMin")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("ColorMin");

                            b1.Property<string>("DiamondShapeId")
                                .HasColumnType("text")
                                .HasColumnName("DiamondShapeId");

                            b1.Property<bool>("IsLabGrown")
                                .HasColumnType("boolean");

                            b1.Property<int>("Quantity")
                                .HasColumnType("integer")
                                .HasColumnName("Quantity");

                            b1.Property<string>("SettingType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("SettingType");

                            b1.HasKey("JewelryId");

                            b1.HasIndex("DiamondShapeId")
                                .IsUnique();

                            b1.ToTable("Jewelry");

                            b1.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "DiamondShape")
                                .WithOne()
                                .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Jewelry.SideDiamond#DiamondShop.Domain.Models.Jewelries.Entities.JewelrySideDiamond", "DiamondShapeId");

                            b1.WithOwner()
                                .HasForeignKey("JewelryId");

                            b1.Navigation("DiamondShape");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.Products.ProductLock", "ProductLock", b1 =>
                        {
                            b1.Property<string>("JewelryId")
                                .HasColumnType("text");

                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<DateTime?>("LockEndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("JewelryId");

                            b1.ToTable("Jewelry");

                            b1.WithOwner()
                                .HasForeignKey("JewelryId");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("JewelryId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryId");

                            b1.ToTable("Jewelry");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("JewelryId");
                        });

                    b.Navigation("Metal");

                    b.Navigation("Model");

                    b.Navigation("ProductLock");

                    b.Navigation("SideDiamond");

                    b.Navigation("Size");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "ParentCategory")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany("MainDiamonds")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", "MainDiamondReq")
                        .WithMany("Shapes")
                        .HasForeignKey("MainDiamondReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainDiamondReq");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("MetalId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MetalId");

                            b1.ToTable("Metal");

                            b1.WithOwner()
                                .HasForeignKey("MetalId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondOpt", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany("SideDiamonds")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SizeMetal", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", "Metal")
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany("SizeMetals")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metal");

                    b.Navigation("Model");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "Gallery", b1 =>
                        {
                            b1.Property<string>("JewelryModelId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryModelId", "Id");

                            b1.ToTable("JewelryModel");

                            b1.ToJson("Gallery");

                            b1.WithOwner()
                                .HasForeignKey("JewelryModelId");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("JewelryModelId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryModelId");

                            b1.ToTable("JewelryModel");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("JewelryModelId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Gallery");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Notifications.Notification", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Notifications.Notification", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", "Order")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Notifications.Notification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Diamonds.Diamond", "Diamond")
                        .WithMany()
                        .HasForeignKey("DiamondId");

                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", "Jewelry")
                        .WithMany()
                        .HasForeignKey("JewelryId");

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diamond");

                    b.Navigation("Discount");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItemWarranty", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.OrderItem", "OrderItem")
                        .WithOne("Warranty")
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Entities.OrderItemWarranty", "OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderLog", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithMany("Logs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.OrderLog", "PreviousLog")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Entities.OrderLog", "PreviousLogId");

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "LogImages", b1 =>
                        {
                            b1.Property<string>("OrderLogId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderLogId", "Id");

                            b1.ToTable("OrderLog");

                            b1.ToJson("LogImages");

                            b1.WithOwner()
                                .HasForeignKey("OrderLogId");
                        });

                    b.Navigation("LogImages");

                    b.Navigation("PreviousLog");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Order", "CustomizeRequestId");

                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Order", "ParentOrderId");

                    b.HasOne("DiamondShop.Domain.Models.Transactions.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DiamondShop.Domain.Models.Promotions.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId");

                    b.Navigation("Account");

                    b.Navigation("Deliverer");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("DiscountId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DiscountId");

                            b1.ToTable("Discount");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("DiscountId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Gift", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Promotion", "Promotion")
                        .WithMany("Gifts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("DiamondShop.Domain.Models.DiamondShapes.ValueObjects.DiamondShapeId", "DiamondGiftShapes", b1 =>
                        {
                            b1.Property<string>("GiftId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GiftId", "Id");

                            b1.ToTable("Gift");

                            b1.ToJson("DiamondGiftShapes");

                            b1.WithOwner()
                                .HasForeignKey("GiftId");
                        });

                    b.Navigation("DiamondGiftShapes");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.Discount", "Discount")
                        .WithMany("DiscountReq")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.Promotions.Promotion", "Promotion")
                        .WithMany("PromoReqs")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Discount");

                    b.Navigation("Model");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReqShape", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", "PromoReq")
                        .WithMany("PromoReqShapes")
                        .HasForeignKey("PromoReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany("PromoReqShapes")
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoReq");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("PromotionId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotion");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Transaction", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId");

                    b.HasOne("DiamondShop.Domain.Models.Transactions.Entities.PaymentMethod", "PayMethod")
                        .WithMany()
                        .HasForeignKey("PayMethodId");

                    b.HasOne("DiamondShop.Domain.Models.Transactions.Transaction", "RefundedTransaction")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Transactions.Transaction", "RefundedTransacId");

                    b.Navigation("PayMethod");

                    b.Navigation("RefundedTransaction");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserClaims", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserLogins", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRole", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRoleClaim", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserToken", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.Navigation("DiamondRequests");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", b =>
                {
                    b.Navigation("PromoReqShapes");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.Navigation("Diamonds");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.Navigation("Shapes");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.Navigation("MainDiamonds");

                    b.Navigation("SideDiamonds");

                    b.Navigation("SizeMetals");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.Navigation("Warranty");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Logs");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.Navigation("DiscountReq");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.Navigation("PromoReqShapes");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.Navigation("Gifts");

                    b.Navigation("PromoReqs");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
