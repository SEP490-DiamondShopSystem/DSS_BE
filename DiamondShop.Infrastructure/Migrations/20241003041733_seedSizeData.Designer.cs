// <auto-generated />
using System;
using DiamondShop.Infrastructure.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiamondShop.Infrastructure.Migrations
{
    [DbContext(typeof(DiamondShopDbContext))]
    [Migration("20241003041733_seedSizeData")]
    partial class seedSizeData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.Property<string>("AccountsId")
                        .HasColumnType("text");

                    b.Property<string>("RolesId")
                        .HasColumnType("text");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountAccountRole");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("IdentityId")
                        .IsUnique();

                    b.ToTable("Account", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Entities.Address", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("Id", "AccountId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Blogs.Blog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Medias")
                        .HasColumnType("text");

                    b.Property<string>("Tags")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Blog", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngravedFont")
                        .HasColumnType("text");

                    b.Property<string>("EngravedText")
                        .HasColumnType("text");

                    b.Property<string>("JewelryModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MetalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("JewelryModelId");

                    b.HasIndex("MetalId");

                    b.HasIndex("SizeId");

                    b.ToTable("CustomizeRequest");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.DiamondRequest", b =>
                {
                    b.Property<string>("DiamondRequestId")
                        .HasColumnType("text");

                    b.Property<string>("CustomizeRequestId")
                        .HasColumnType("text");

                    b.Property<decimal?>("CaratFrom")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CaratTo")
                        .HasColumnType("numeric");

                    b.Property<string>("Clarity")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("Culet")
                        .HasColumnType("text");

                    b.Property<string>("Cut")
                        .HasColumnType("text");

                    b.Property<string>("DiamondId")
                        .HasColumnType("text");

                    b.Property<string>("DiamondShapeId")
                        .HasColumnType("text");

                    b.Property<string>("Girdle")
                        .HasColumnType("text");

                    b.Property<bool?>("IsLabGrown")
                        .HasColumnType("boolean");

                    b.Property<string>("Polish")
                        .HasColumnType("text");

                    b.Property<int>("Position")
                        .HasColumnType("integer");

                    b.Property<string>("Symmetry")
                        .HasColumnType("text");

                    b.HasKey("DiamondRequestId", "CustomizeRequestId");

                    b.HasIndex("CustomizeRequestId");

                    b.HasIndex("DiamondId");

                    b.HasIndex("DiamondShapeId");

                    b.ToTable("DiamondRequest");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.SideDiamondRequest", b =>
                {
                    b.Property<string>("SideDiamondReqId")
                        .HasColumnType("text");

                    b.Property<string>("CustomizeRequestId")
                        .HasColumnType("text");

                    b.Property<float>("CaratWeight")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("SideDiamondReqId", "CustomizeRequestId");

                    b.HasIndex("CustomizeRequestId");

                    b.ToTable("SideDiamondRequest");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DeliveryFees.DeliveryFee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FromKm")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToKm")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("DeliveryFee");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.DiamondPrice", b =>
                {
                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.Property<string>("CriteriaId")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("ShapeId", "CriteriaId");

                    b.HasIndex("CriteriaId");

                    b.ToTable("DiamondPrice", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.Entities.DiamondCriteria", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float>("CaratTo")
                        .HasColumnType("real");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cut")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsLabGrown")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("DiamondCriteria", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Diamond_Shape", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Shape = "Round"
                        },
                        new
                        {
                            Id = "2",
                            Shape = "Princess"
                        },
                        new
                        {
                            Id = "3",
                            Shape = "Cushion"
                        },
                        new
                        {
                            Id = "4",
                            Shape = "Emerald"
                        },
                        new
                        {
                            Id = "5",
                            Shape = "Oval"
                        },
                        new
                        {
                            Id = "6",
                            Shape = "Radiant"
                        },
                        new
                        {
                            Id = "7",
                            Shape = "Asscher"
                        },
                        new
                        {
                            Id = "8",
                            Shape = "Marquise"
                        },
                        new
                        {
                            Id = "9",
                            Shape = "Heart"
                        },
                        new
                        {
                            Id = "10",
                            Shape = "Pear"
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Diamonds.Diamond", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("Carat")
                        .HasColumnType("real");

                    b.Property<string>("Clarity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Culet")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Cut")
                        .HasColumnType("text");

                    b.Property<float>("Depth")
                        .HasColumnType("real");

                    b.Property<string>("DiamondShapeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fluorescence")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Girdle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasGIACert")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLabDiamond")
                        .HasColumnType("boolean");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<string>("Measurement")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Polish")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("PriceOffset")
                        .HasColumnType("numeric");

                    b.Property<string>("Symmetry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Table")
                        .HasColumnType("real");

                    b.Property<float>("WidthLengthRatio")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("DiamondShapeId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("Diamond", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("JewelryReview", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelrySideDiamond", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("Carat")
                        .HasColumnType("real");

                    b.Property<int>("ClarityMax")
                        .HasColumnType("integer");

                    b.Property<string>("ClarityMin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorMax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorMin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("JewelrySideDiamond", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("IsAwaiting")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSold")
                        .HasColumnType("boolean");

                    b.Property<string>("MetalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReviewId")
                        .HasColumnType("text");

                    b.Property<string>("SerialCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SizeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("MetalId")
                        .IsUnique();

                    b.HasIndex("ModelId")
                        .IsUnique();

                    b.HasIndex("SizeId")
                        .IsUnique();

                    b.ToTable("Jewelry", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsGeneral")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId")
                        .IsUnique();

                    b.ToTable("JewelryModelCategory", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("MainDiamondReq", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", b =>
                {
                    b.Property<string>("MainDiamondReqId")
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.Property<float>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float>("CaratTo")
                        .HasColumnType("real");

                    b.Property<string>("MainDiamondReqId1")
                        .HasColumnType("text");

                    b.HasKey("MainDiamondReqId", "ShapeId");

                    b.HasIndex("MainDiamondReqId")
                        .IsUnique();

                    b.HasIndex("MainDiamondReqId1");

                    b.HasIndex("ShapeId")
                        .IsUnique();

                    b.ToTable("MainDiamondShape", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Metal", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9b1bbae2-d3de-452c-a699-75f777f28344",
                            Name = "Platinum",
                            Price = 778370m
                        },
                        new
                        {
                            Id = "96bd6ee3-5b53-41fc-aa4e-215644833b17",
                            Name = "14K Yellow Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "0296db20-d597-483f-a835-3b8f5aeac260",
                            Name = "14K White Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "158c188e-a635-441f-a6b5-ba92f5b4a8b2",
                            Name = "14K Pink Gold",
                            Price = 1217096m
                        },
                        new
                        {
                            Id = "d8013842-8f10-41f3-9cac-dfebfe197f87",
                            Name = "16K Yellow Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "a032378e-1e03-4931-8a9d-b05448c96643",
                            Name = "16K White Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "de9cfca6-260f-4025-b3db-b6e2e608df01",
                            Name = "16K Pink Gold",
                            Price = 1391318m
                        },
                        new
                        {
                            Id = "cf21d220-b836-4320-8a87-d0d15d0c8a78",
                            Name = "18K Yellow Gold",
                            Price = 1565233m
                        },
                        new
                        {
                            Id = "5b30aec8-7d40-44f1-831d-9bfe1f956e91",
                            Name = "18K White Gold",
                            Price = 1565233m
                        },
                        new
                        {
                            Id = "fca611bf-f706-4038-882a-651f5972ba6d",
                            Name = "18K Pink Gold",
                            Price = 1565233m
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondOpt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<float>("CaratWeight")
                        .HasColumnType("real");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SideDiamondReqId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SideDiamondReqId1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SideDiamondReqId");

                    b.HasIndex("SideDiamondReqId1");

                    b.ToTable("SideDiamondOpt", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ClarityMax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ClarityMin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorMax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ColorMin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModelId1")
                        .HasColumnType("text");

                    b.Property<string>("SettingType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("ModelId1");

                    b.HasIndex("ShapeId")
                        .IsUnique();

                    b.ToTable("SideDiamondReq", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Size", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Size", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "94068c81-13b1-4729-94db-fb21c1772359",
                            Unit = "milimeter",
                            Value = 3f
                        },
                        new
                        {
                            Id = "b8b13601-d7e9-47db-b924-6b9679dde510",
                            Unit = "milimeter",
                            Value = 4f
                        },
                        new
                        {
                            Id = "158ffe39-c486-4aef-b2b0-2d5f748d7399",
                            Unit = "milimeter",
                            Value = 5f
                        },
                        new
                        {
                            Id = "6e929733-ac78-44ea-bc5d-a78ea353796e",
                            Unit = "milimeter",
                            Value = 6f
                        },
                        new
                        {
                            Id = "af6e5c22-b7e7-4b47-ba08-9cf20cb90be3",
                            Unit = "milimeter",
                            Value = 7f
                        },
                        new
                        {
                            Id = "3ee87ad8-ecce-4615-bc46-404fda9a2716",
                            Unit = "milimeter",
                            Value = 8f
                        },
                        new
                        {
                            Id = "f36f9582-64e3-4008-95c1-6e2ca14d56c3",
                            Unit = "milimeter",
                            Value = 9f
                        },
                        new
                        {
                            Id = "26910ada-6d78-4749-a189-b9df8781823f",
                            Unit = "milimeter",
                            Value = 10f
                        },
                        new
                        {
                            Id = "874f136d-88d1-4d76-b1b7-e927e8ba60ec",
                            Unit = "milimeter",
                            Value = 11f
                        },
                        new
                        {
                            Id = "ca5c01a9-a9ac-41ef-bb9f-6de8d5a58de8",
                            Unit = "milimeter",
                            Value = 12f
                        },
                        new
                        {
                            Id = "fae5f221-86c7-4207-9bf8-7139cbc793b9",
                            Unit = "milimeter",
                            Value = 13f
                        },
                        new
                        {
                            Id = "80b8ada4-fbd8-46a7-9015-933da5a2c65a",
                            Unit = "milimeter",
                            Value = 14f
                        },
                        new
                        {
                            Id = "d5ec0c65-a84f-4f30-94af-db67f9a9ea85",
                            Unit = "milimeter",
                            Value = 15f
                        },
                        new
                        {
                            Id = "6fb280a4-aa0b-498b-b78a-7f0f93d64b45",
                            Unit = "milimeter",
                            Value = 16f
                        },
                        new
                        {
                            Id = "c87f7e47-5f7b-4248-aed2-3551bd46f205",
                            Unit = "milimeter",
                            Value = 17f
                        },
                        new
                        {
                            Id = "ce0587b5-0ec3-4ec4-8586-44757311d275",
                            Unit = "milimeter",
                            Value = 18f
                        },
                        new
                        {
                            Id = "d4698130-2b66-4ac6-ae0f-a64b11ea4cf3",
                            Unit = "milimeter",
                            Value = 19f
                        },
                        new
                        {
                            Id = "3b8a7a1e-d872-43fd-a6c9-6dca4a502dab",
                            Unit = "milimeter",
                            Value = 20f
                        },
                        new
                        {
                            Id = "67c6bb97-dcb4-4238-8adb-45caa873116b",
                            Unit = "milimeter",
                            Value = 21f
                        },
                        new
                        {
                            Id = "4326f493-9b50-453b-aef8-d7e44fae1004",
                            Unit = "milimeter",
                            Value = 22f
                        },
                        new
                        {
                            Id = "7fd5393f-07a4-41ee-b01a-3c094a26c26c",
                            Unit = "milimeter",
                            Value = 23f
                        },
                        new
                        {
                            Id = "1dbc2a5c-10ba-4f66-ac80-ef9ffd9ffc6e",
                            Unit = "milimeter",
                            Value = 24f
                        },
                        new
                        {
                            Id = "9da4b1f7-40df-4d63-bbb8-2dfe51a000d1",
                            Unit = "milimeter",
                            Value = 3f
                        },
                        new
                        {
                            Id = "2bedddec-7c52-4c27-9885-b0440c8ce6bc",
                            Unit = "milimeter",
                            Value = 4f
                        },
                        new
                        {
                            Id = "dcaa48e2-522a-447f-9d5b-66fa8bca3632",
                            Unit = "milimeter",
                            Value = 5f
                        },
                        new
                        {
                            Id = "92779a8d-2bc6-4040-a9e5-54ea06dba4f1",
                            Unit = "milimeter",
                            Value = 6f
                        },
                        new
                        {
                            Id = "58111f37-37bb-4cce-ad1d-bdb05cc79563",
                            Unit = "milimeter",
                            Value = 7f
                        },
                        new
                        {
                            Id = "b1b64c3d-d176-41bc-9fba-31cc9daf6b03",
                            Unit = "milimeter",
                            Value = 8f
                        },
                        new
                        {
                            Id = "4d794ca5-ab25-436d-b915-3aa46feb7bd8",
                            Unit = "milimeter",
                            Value = 9f
                        },
                        new
                        {
                            Id = "a3ccab2d-10b8-49f3-9fa5-fb048c8d0568",
                            Unit = "milimeter",
                            Value = 10f
                        },
                        new
                        {
                            Id = "1705b58b-7eb4-4625-97cc-d33540816461",
                            Unit = "milimeter",
                            Value = 11f
                        },
                        new
                        {
                            Id = "34c34cab-8aa0-42e5-8ed2-e45e43ccb61e",
                            Unit = "milimeter",
                            Value = 12f
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SizeMetal", b =>
                {
                    b.Property<string>("SizeId")
                        .HasColumnType("text");

                    b.Property<string>("MetalId")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .HasColumnType("text");

                    b.Property<string>("JewelryModelId")
                        .HasColumnType("text");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("SizeId", "MetalId", "ModelId");

                    b.HasIndex("JewelryModelId");

                    b.HasIndex("MetalId");

                    b.HasIndex("ModelId");

                    b.ToTable("SizeMetal", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BackType")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ChainType")
                        .HasColumnType("text");

                    b.Property<string>("ClaspType")
                        .HasColumnType("text");

                    b.Property<bool>("IsEngravable")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRhodiumFinish")
                        .HasColumnType("boolean");

                    b.Property<float?>("Length")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float?>("Width")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .IsUnique();

                    b.HasIndex("Id");

                    b.ToTable("JewelryModel", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.News.News", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PriorityLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Notifications.Notification", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.DeliveryPackage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CompleteDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DelivererId")
                        .HasColumnType("text");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryMethod")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DelivererId");

                    b.ToTable("DeliveryPackage");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiamondId")
                        .HasColumnType("text");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<string>("EngravedFont")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EngravedText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("JewelryId")
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PromoPercent")
                        .HasColumnType("integer");

                    b.Property<decimal>("PurchasedPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiamondId")
                        .IsUnique();

                    b.HasIndex("JewelryId")
                        .IsUnique();

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItem", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItemWarranty", b =>
                {
                    b.Property<string>("OrderItemId")
                        .HasColumnType("text");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("SoldPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarrantyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderItemId", "ItemId");

                    b.ToTable("OrderItemWarranty");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderLog", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeliveryPackageId")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousLogId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryPackageId");

                    b.HasIndex("OrderId");

                    b.HasIndex("PreviousLogId")
                        .IsUnique();

                    b.ToTable("OrderLog", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CancelledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CancelledReason")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomizeRequestId")
                        .HasColumnType("text");

                    b.Property<string>("DeliveryPackageId")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ParentOrderId")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShippedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ShippingFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalFine")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRefund")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CustomizeRequestId")
                        .IsUnique();

                    b.HasIndex("DeliveryPackageId");

                    b.HasIndex("ParentOrderId")
                        .IsUnique();

                    b.HasIndex("TransactionId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Gift", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<float?>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float?>("CaratTo")
                        .HasColumnType("real");

                    b.Property<string>("ClarityFrom")
                        .HasColumnType("text");

                    b.Property<string>("ClarityTo")
                        .HasColumnType("text");

                    b.Property<string>("ColorFrom")
                        .HasColumnType("text");

                    b.Property<string>("ColorTo")
                        .HasColumnType("text");

                    b.Property<string>("CutFrom")
                        .HasColumnType("text");

                    b.Property<string>("CutTo")
                        .HasColumnType("text");

                    b.Property<string>("DiamondOrigin")
                        .HasColumnType("text");

                    b.Property<string>("ItemId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionId")
                        .HasColumnType("text");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PromotionId");

                    b.ToTable("Gift", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<float?>("CaratFrom")
                        .HasColumnType("real");

                    b.Property<float?>("CaratTo")
                        .HasColumnType("real");

                    b.Property<string>("ClarityFrom")
                        .HasColumnType("text");

                    b.Property<string>("ClarityTo")
                        .HasColumnType("text");

                    b.Property<string>("ColorFrom")
                        .HasColumnType("text");

                    b.Property<string>("ColorTo")
                        .HasColumnType("text");

                    b.Property<string>("CutFrom")
                        .HasColumnType("text");

                    b.Property<string>("CutTo")
                        .HasColumnType("text");

                    b.Property<string>("DiamondOrigin")
                        .HasColumnType("text");

                    b.Property<string>("DiscountId")
                        .HasColumnType("text");

                    b.Property<string>("ModelId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PromotionId")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PromotionId");

                    b.ToTable("PromoReq", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReqShape", b =>
                {
                    b.Property<string>("PromoReqId")
                        .HasColumnType("text");

                    b.Property<string>("ShapeId")
                        .HasColumnType("text");

                    b.Property<string>("PromoReqId1")
                        .HasColumnType("text");

                    b.HasKey("PromoReqId", "ShapeId");

                    b.HasIndex("PromoReqId1");

                    b.HasIndex("ShapeId");

                    b.ToTable("PromoReqShape", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsExcludeQualifierProduct")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<string>("RedemptionMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Promotion", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.RoleAggregate.AccountRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("RoleType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleName")
                        .IsUnique();

                    b.ToTable("Account_Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            RoleDescription = "customer",
                            RoleName = "customer",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "4",
                            RoleDescription = "customer_gold",
                            RoleName = "customer_gold",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "3",
                            RoleDescription = "customer_silver",
                            RoleName = "customer_silver",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "2",
                            RoleDescription = "customer_bronze",
                            RoleName = "customer_bronze",
                            RoleType = 0
                        },
                        new
                        {
                            Id = "11",
                            RoleDescription = "staff",
                            RoleName = "staff",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "22",
                            RoleDescription = "manager",
                            RoleName = "manager",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "33",
                            RoleDescription = "admin",
                            RoleName = "admin",
                            RoleType = 1
                        },
                        new
                        {
                            Id = "44",
                            RoleDescription = "deliverer",
                            RoleName = "deliverer",
                            RoleType = 1
                        });
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Entities.PaymentMethod", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MethodThumbnailPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Transaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AppTransactionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("FineAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("PayDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PayMethodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaygateTransactionCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefundedTransacId")
                        .HasColumnType("text");

                    b.Property<string>("TimeStampe")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TransactionAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PayMethodId")
                        .IsUnique();

                    b.HasIndex("RefundedTransacId")
                        .IsUnique();

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Warranties.Warranty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Warranty");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ExpiredDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Outbox.OutboxMessages", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CompleteTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("ProcessTime")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("outbox_message", (string)null);
                });

            modelBuilder.Entity("AccountAccountRole", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.RoleAggregate.AccountRole", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.AccountAggregate.Account", "IdentityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.FullName", "FullName", b1 =>
                        {
                            b1.Property<string>("AccountId")
                                .HasColumnType("text");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("LastName");

                            b1.HasKey("AccountId");

                            b1.ToTable("Account");

                            b1.WithOwner()
                                .HasForeignKey("AccountId");
                        });

                    b.Navigation("FullName")
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Entities.Address", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany("Addresses")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Blogs.Blog", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("BlogId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("BlogId");

                            b1.ToTable("Blog");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("BlogId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", null)
                        .WithMany()
                        .HasForeignKey("JewelryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", null)
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", null)
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.DiamondRequest", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", null)
                        .WithMany("DiamondRequests")
                        .HasForeignKey("CustomizeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Diamonds.Diamond", null)
                        .WithMany()
                        .HasForeignKey("DiamondId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", null)
                        .WithMany()
                        .HasForeignKey("DiamondShapeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.Entities.SideDiamondRequest", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", null)
                        .WithMany("SideDiamondRequests")
                        .HasForeignKey("CustomizeRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", null)
                        .WithMany()
                        .HasForeignKey("SideDiamondReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.DiamondPrices.DiamondPrice", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.DiamondPrices.Entities.DiamondCriteria", "Criteria")
                        .WithMany()
                        .HasForeignKey("CriteriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Criteria");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Diamonds.Diamond", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "DiamondShape")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Diamonds.Diamond", "DiamondShapeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", null)
                        .WithMany("Diamonds")
                        .HasForeignKey("JewelryId");

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "Gallery", b1 =>
                        {
                            b1.Property<string>("DiamondId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DiamondId", "Id");

                            b1.ToTable("Diamond");

                            b1.ToJson("Gallery");

                            b1.WithOwner()
                                .HasForeignKey("DiamondId");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("DiamondId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DiamondId");

                            b1.ToTable("Diamond");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("DiamondId");
                        });

                    b.Navigation("DiamondShape");

                    b.Navigation("Gallery");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", null)
                        .WithOne("Review")
                        .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Entities.JewelryReview", "Id");

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "Images", b1 =>
                        {
                            b1.Property<string>("JewelryReviewId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryReviewId", "Id");

                            b1.ToTable("JewelryReview");

                            b1.ToJson("Images");

                            b1.WithOwner()
                                .HasForeignKey("JewelryReviewId");
                        });

                    b.Navigation("Account");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Entities.JewelrySideDiamond", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", null)
                        .WithMany("SideDiamonds")
                        .HasForeignKey("JewelryId");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", "Metal")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Jewelry", "MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Jewelry", "ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", "Size")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Jewelries.Jewelry", "SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("JewelryId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryId");

                            b1.ToTable("Jewelry");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("JewelryId");
                        });

                    b.Navigation("Metal");

                    b.Navigation("Model");

                    b.Navigation("Size");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "ParentCategory")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", null)
                        .WithMany("MainDiamonds")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", "MainDiamondReq")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", "MainDiamondReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", null)
                        .WithMany("Shapes")
                        .HasForeignKey("MainDiamondReqId1");

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondShape", "ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MainDiamondReq");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("MetalId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("MetalId");

                            b1.ToTable("Metal");

                            b1.WithOwner()
                                .HasForeignKey("MetalId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondOpt", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", null)
                        .WithMany("SideDiamondOpts")
                        .HasForeignKey("SideDiamondReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", "SideDiamondReq")
                        .WithMany()
                        .HasForeignKey("SideDiamondReqId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SideDiamondReq");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", null)
                        .WithMany("SideDiamonds")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId1");

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", "ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SizeMetal", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", null)
                        .WithMany("SizeMetals")
                        .HasForeignKey("JewelryModelId");

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Metal", "Metal")
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Metal");

                    b.Navigation("Model");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.Entities.JewelryModelCategory", "Category")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "Gallery", b1 =>
                        {
                            b1.Property<string>("JewelryModelId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryModelId", "Id");

                            b1.ToTable("JewelryModel");

                            b1.ToJson("Gallery");

                            b1.WithOwner()
                                .HasForeignKey("JewelryModelId");
                        });

                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("JewelryModelId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("JewelryModelId");

                            b1.ToTable("JewelryModel");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("JewelryModelId");
                        });

                    b.Navigation("Category");

                    b.Navigation("Gallery");

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Notifications.Notification", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Notifications.Notification", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", "Order")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Notifications.Notification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.DeliveryPackage", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Deliverer")
                        .WithMany()
                        .HasForeignKey("DelivererId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Deliverer");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Diamonds.Diamond", "Diamond")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Entities.OrderItem", "DiamondId");

                    b.HasOne("DiamondShop.Domain.Models.Jewelries.Jewelry", "Jewelry")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Entities.OrderItem", "JewelryId");

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diamond");

                    b.Navigation("Jewelry");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItemWarranty", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.OrderItem", null)
                        .WithMany("Warranties")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderLog", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.DeliveryPackage", null)
                        .WithMany()
                        .HasForeignKey("DeliveryPackageId");

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithMany("Logs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.OrderLog", "PreviousLog")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Entities.OrderLog", "PreviousLogId");

                    b.OwnsMany("DiamondShop.Domain.Common.ValueObjects.Media", "LogImages", b1 =>
                        {
                            b1.Property<string>("OrderLogId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OrderLogId", "Id");

                            b1.ToTable("OrderLog");

                            b1.ToJson("LogImages");

                            b1.WithOwner()
                                .HasForeignKey("OrderLogId");
                        });

                    b.Navigation("LogImages");

                    b.Navigation("PreviousLog");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.AccountAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Order", "CustomizeRequestId");

                    b.HasOne("DiamondShop.Domain.Models.Orders.Entities.DeliveryPackage", null)
                        .WithMany()
                        .HasForeignKey("DeliveryPackageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("DiamondShop.Domain.Models.Orders.Order", null)
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Orders.Order", "ParentOrderId");

                    b.HasOne("DiamondShop.Domain.Models.Transactions.Transaction", "Transaction")
                        .WithMany("Orders")
                        .HasForeignKey("TransactionId");

                    b.Navigation("Account");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("DiscountId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("DiscountId");

                            b1.ToTable("Discount");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("DiscountId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Gift", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Promotion", "Promotion")
                        .WithMany("Gifts")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsMany("DiamondShop.Domain.Models.DiamondShapes.ValueObjects.DiamondShapeId", "DiamondGiftShapes", b1 =>
                        {
                            b1.Property<string>("GiftId")
                                .HasColumnType("text");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("GiftId", "Id");

                            b1.ToTable("Gift");

                            b1.ToJson("DiamondGiftShapes");

                            b1.WithOwner()
                                .HasForeignKey("GiftId");
                        });

                    b.Navigation("DiamondGiftShapes");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.Discount", "Discount")
                        .WithMany("DiscountReq")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.JewelryModels.JewelryModel", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DiamondShop.Domain.Models.Promotions.Promotion", "Promotion")
                        .WithMany("PromoReqs")
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Discount");

                    b.Navigation("Model");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReqShape", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", "PromoReq")
                        .WithMany()
                        .HasForeignKey("PromoReqId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", null)
                        .WithMany("PromoReqShapes")
                        .HasForeignKey("PromoReqId1");

                    b.HasOne("DiamondShop.Domain.Models.DiamondShapes.DiamondShape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PromoReq");

                    b.Navigation("Shape");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.OwnsOne("DiamondShop.Domain.Common.ValueObjects.Media", "Thumbnail", b1 =>
                        {
                            b1.Property<string>("PromotionId")
                                .HasColumnType("text");

                            b1.Property<string>("ContentType")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("MediaName")
                                .HasColumnType("text");

                            b1.Property<string>("MediaPath")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("PromotionId");

                            b1.ToTable("Promotion");

                            b1.ToJson("Thumbnail");

                            b1.WithOwner()
                                .HasForeignKey("PromotionId");
                        });

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Transaction", b =>
                {
                    b.HasOne("DiamondShop.Domain.Models.Transactions.Entities.PaymentMethod", "PayMethod")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Transactions.Transaction", "PayMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Domain.Models.Transactions.Transaction", "RefundedTransaction")
                        .WithOne()
                        .HasForeignKey("DiamondShop.Domain.Models.Transactions.Transaction", "RefundedTransacId");

                    b.Navigation("PayMethod");

                    b.Navigation("RefundedTransaction");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserClaims", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserLogins", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRole", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserRoleClaim", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUserToken", b =>
                {
                    b.HasOne("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", null)
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.AccountAggregate.Account", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.CustomizeRequests.CustomizeRequest", b =>
                {
                    b.Navigation("DiamondRequests");

                    b.Navigation("SideDiamondRequests");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Jewelries.Jewelry", b =>
                {
                    b.Navigation("Diamonds");

                    b.Navigation("Review");

                    b.Navigation("SideDiamonds");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.MainDiamondReq", b =>
                {
                    b.Navigation("Shapes");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.Entities.SideDiamondReq", b =>
                {
                    b.Navigation("SideDiamondOpts");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.JewelryModels.JewelryModel", b =>
                {
                    b.Navigation("MainDiamonds");

                    b.Navigation("SideDiamonds");

                    b.Navigation("SizeMetals");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Entities.OrderItem", b =>
                {
                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Orders.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.Discount", b =>
                {
                    b.Navigation("DiscountReq");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Entities.PromoReq", b =>
                {
                    b.Navigation("PromoReqShapes");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Promotions.Promotion", b =>
                {
                    b.Navigation("Gifts");

                    b.Navigation("PromoReqs");
                });

            modelBuilder.Entity("DiamondShop.Domain.Models.Transactions.Transaction", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityRole", b =>
                {
                    b.Navigation("RoleClaims");
                });

            modelBuilder.Entity("DiamondShop.Infrastructure.Identity.Models.CustomIdentityUser", b =>
                {
                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
